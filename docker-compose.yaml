version: '3'
services:
  node_app:
    image: node:alpine
    container_name: my_node_app
    working_dir: /app
    volumes:
      - ./:/app
    ports:
      - "3000:3000"
      - "4000:4000"
    environment:
      NODE_ENV: production
    tty: true
    depends_on:
      - mongodb
      - redis
    networks:
      - my_network

  mongodb:
    image: mongo
    container_name: my_mongodb
    ports:
      - "27017:27017"
    volumes:
      - mongodb_data:/data/db
      - ./project/mongodb-backup:/data/db
    networks:
      my_network:
        ipv4_address: 172.28.0.2

  redis:
    image: redis
    container_name: my_redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      my_network:
        ipv4_address: 172.28.0.3
    
  adminer:
    image: adminer
    container_name: my_adminer
    restart: always
    ports:
      - "8080:8080"
    networks:
      my_network:
        ipv4_address: 172.28.0.5

  # postgres:
  #   image: postgres:latest
  #   container_name: my_postgres_db
  #   restart: always
  #   environment:
  #     POSTGRES_DB: my_database
  #     POSTGRES_USER: my_user
  #     POSTGRES_PASSWORD: my_password
  #   ports:
  #     - "5432:5432"
  #   volumes:
  #     - postgres_data:/var/lib/postgresql/data
  #   healthcheck:
  #     test: ["CMD-SHELL", "pg_isready -U postgres"]
  #     interval: 10s
  #     timeout: 5s
  #     retries: 5

  # logto:
  #   depends_on:
  #     postgres:
  #       condition: service_healthy
  #   image: svhd/logto:${TAG-latest}
  #   entrypoint: ["sh", "-c", "npm run cli db seed -- --swe && npm start"]
  #   ports:
  #     - "3001:3001"   # Map container port 3001 to host port 3001
  #     - "3002:3002"   # Map container port 3002 to host port 3002
  #   environment:
  #     - TRUST_PROXY_HEADER=1
  #     # Use localhost instead of the service name for local testing
  #     - DB_URL=postgres://my_user:my_password@postgres:5432/logto
  #     # Set other environment variables as needed
  #     - ENDPOINT
  #     - ADMIN_ENDPOINT
  

volumes:
  mongodb_data:
  redis_data:
  # postgres_data:

networks:
  my_network:
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: 172.28.0.0/16